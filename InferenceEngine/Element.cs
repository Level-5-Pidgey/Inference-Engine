using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace InferenceEngine
{
    public class Element : IEquatable<Element>, IComparable<Element>
    {
        public bool State
        {
            get;
            set;
        }

        public string Name
        {
            get;
            set;
        }

        public bool IsImplied
        {
            get;
            set;
        }

        public Element(string aName, bool aState = false, bool aImplied = false)
        {
            Name = aName;
            IsImplied = aImplied;
            State = aState;
        }

        public void SetState()
        {
            State = !State;
        }

        public override string ToString()
        {
            return Name + " : " + State.ToString(); 
        }

        /*
         * For the improvement of other classes that compare the names of elements to evaluate if the two elements are the same, an IEquatable interface has been implemented.
         */

        public bool Equals(Element other)
        {
            return null != other && (this.Name == other.Name);
        }

        public override bool Equals(object obj)
        {
            return Equals(obj as Element);
        }

        //Autogenerated to appease the almighty compiler overlord.
        public override int GetHashCode()
        {
            var hashCode = -2085996601;
            hashCode = hashCode * -1521134295 + State.GetHashCode();
            hashCode = hashCode * -1521134295 + EqualityComparer<string>.Default.GetHashCode(Name);
            hashCode = hashCode * -1521134295 + IsImplied.GetHashCode();
            return hashCode;
        }

        //Implemented to allow the elements to be alphabetically sorted before being printed
        public int CompareTo(Element other)
        {
            return this.Name.CompareTo(other.Name);
        }
    }
}
